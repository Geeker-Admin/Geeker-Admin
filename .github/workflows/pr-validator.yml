name: PR Validator

on:
  pull_request:
    types: [opened, edited, synchronize]

# 添加必要的权限
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate PR Format
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            let validationErrors = [];

            // 检查是否关联了 issue
            const hasIssueLink = body.includes('**关联 Issue:** #') && !body.includes('**关联 Issue:** #_____');
            if (!hasIssueLink) {
              validationErrors.push('❌ 必须关联一个 issue（格式：#issue_number）');
            }

            // 检查是否只有一个 commit
            if (commits.data.length > 1) {
              validationErrors.push('❌ PR 只能包含一个 commit，请使用 rebase 合并多个 commit');
            }

            // 检查是否选择了 PR 类型
            const validTypes = [
              'feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 
              'build', 'ci', 'chore', 'revert', 'wip', 'workflow', 'types', 'release'
            ];

            const hasPRType = body.includes('- [x]') && validTypes.some(type => {
              const typeMap = {
                'feat': '✨ 新功能',
                'fix': '🐛 Bug 修复', 
                'docs': '📝 文档更新',
                'style': '🎨 代码重构',
                'refactor': '🎨 代码重构',
                'perf': '⚡ 性能优化',
                'test': '✅ 测试相关',
                'build': '🔧 构建/CI 相关',
                'ci': '🔧 构建/CI 相关',
                'chore': '🔧 构建/CI 相关',
                'revert': '🔄 回滚',
                'wip': '🚧 开发中',
                'workflow': '🔧 构建/CI 相关',
                'types': '🔧 构建/CI 相关',
                'release': '🚀 发布相关'
              };
              return body.includes(typeMap[type]);
            });
            if (!hasPRType) {
              validationErrors.push('❌ 必须选择 PR 类型（只能选择一个）参考：https://github.com/Geeker-Admin/Geeker-Admin/blob/main/commitlint.config.mjs#L31-L45');
            }

            // 检查是否填写了改进功能点
            const hasImprovements = body.includes('### 主要改进') && 
              body.includes('- ') && 
              !body.includes('### 主要改进\n- ');
            if (!hasImprovements) {
              validationErrors.push('❌ 必须填写改进功能点');
            }

            // 检查是否完成了检查清单
            const hasChecklist = body.includes('## 📋 检查清单') && 
              body.includes('- [x]') && 
              body.includes('我的提交信息遵循了 [Conventional Commits]') &&
              body.includes('我的 PR 只包含一个 commit') &&
              body.includes('我使用了 rebase 而不是 merge');
            if (!hasChecklist) {
              validationErrors.push('❌ 必须完成检查清单');
            }

            if (validationErrors.length > 0) {
              // 添加标签
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['invalid', 'needs-info']
              });
              
              // 添加评论
              const commentBody = `⚠️ **PR 格式不符合要求**\n\n${validationErrors.join('\n\n')}\n\n### 📋 请按照以下要求完善你的 PR：\n\n1. **关联 Issue**：在 PR 描述中关联相关 issue（格式：#issue_number）\n2. **单一 Commit**：确保 PR 只包含一个 commit，使用 rebase 合并多个 commit\n3. **选择类型**：选择正确的 PR 类型（只能选择一个）\n4. **填写改进点**：详细描述本次 PR 的改进功能点\n5. **完成检查清单**：确保所有检查项都已完成\n\n### ⚠️ 重要提醒\n- 不符合格式要求的 PR 将被标记为 invalid\n- 请使用提供的模板创建 PR\n\n请完善信息后重新提交，谢谢！`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: commentBody
              });
              
              core.setFailed('PR format validation failed');
            } else {
              // 移除 invalid 标签（如果存在）
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: 'invalid'
                });
              } catch (e) {
                // 标签不存在，忽略错误
              }
            }
